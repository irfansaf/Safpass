plugins {
    id 'java'
    id 'distribution'
    id 'org.gradle.crypto.checksum' version '1.4.0'
    id 'checkstyle'
    id 'jacoco'
}

group 'com.irfansaf.safpass'
version '1.0.1-Alpha'

repositories {
    mavenCentral()
}


dependencies {
    implementation 'com.formdev:flatlaf:3.0'
    implementation 'com.formdev:flatlaf-extras:3.0'
    implementation 'com.formdev:svgSalamander:1.1.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'junit:junit:4.13.1'
}


jar {
    archiveBaseName = 'safpass'
    archiveVersion = "$project.version"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes('Main-Class': 'com.irfansaf.safpass.Safpass')
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

distributions {
    main {
        distributionBaseName = 'safpass'
        contents {
            from jar
        }
    }
}

task createChecksum(type: org.gradle.crypto.checksum.Checksum, dependsOn: distZip) {
    files = fileTree(dir: "${buildDir}/distributions").matching { include "*.zip" }
    outputDir = new File("${buildDir}/distributions")
    algorithm = org.gradle.crypto.checksum.Checksum.Algorithm.SHA256
    appendFileNameToChecksum.set(true)
}

task bumpVersion {
    doLast {
        if (!project.hasProperty('toVersion')) {
            throw new GradleException("Please provide 'toVersion' property e.g. gradle bumpVersion -PtoVersion=$project.version")
        }
        def extensions = ['java', 'gradle', 'sbt', 'xml', 'md', 'bat', 'sh', 'txt', 'command'].collect { "**/*.$it" }.join(",")
        def files = new groovy.util.FileNameFinder().getFileNames("$projectDir", extensions)
        files.each { versionedFile ->
            def file = new File(versionedFile)
            file.write(file.getText('UTF-8').replaceAll("$project.version", "$toVersion"), 'UTF-8')
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            includes = [
                    'safpass.data',
                    'safpass.crypt',
                    'safpass.crypt.io',
                    'safpass.io',
                    'safpass.xml.converter',
                    'safpass.xml.bind'
            ]
        }

        rule {
            element = 'PACKAGE'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.4
            }
            includes = [
                    'safpass.util'
            ]
        }
    }
}

test {
    useJUnitPlatform()
}

distTar.enabled = false
distZip.finalizedBy(createChecksum)